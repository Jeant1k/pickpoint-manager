// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pickpoint/v1/pickpoint.proto

package pickpoint

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrderId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderIdMultiError, or nil if none found.
func (m *OrderId) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := OrderIdValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderIdMultiError(errors)
	}

	return nil
}

// OrderIdMultiError is an error wrapping multiple validation errors returned
// by OrderId.ValidateAll() if the designated constraints aren't met.
type OrderIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderIdMultiError) AllErrors() []error { return m }

// OrderIdValidationError is the validation error returned by OrderId.Validate
// if the designated constraints aren't met.
type OrderIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderIdValidationError) ErrorName() string { return "OrderIdValidationError" }

// Error satisfies the builtin error interface
func (e OrderIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderIdValidationError{}

// Validate checks the field values on ClientId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClientId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClientIdMultiError, or nil
// if none found.
func (m *ClientId) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClientId() <= 0 {
		err := ClientIdValidationError{
			field:  "ClientId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClientIdMultiError(errors)
	}

	return nil
}

// ClientIdMultiError is an error wrapping multiple validation errors returned
// by ClientId.ValidateAll() if the designated constraints aren't met.
type ClientIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientIdMultiError) AllErrors() []error { return m }

// ClientIdValidationError is the validation error returned by
// ClientId.Validate if the designated constraints aren't met.
type ClientIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientIdValidationError) ErrorName() string { return "ClientIdValidationError" }

// Error satisfies the builtin error interface
func (e ClientIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientIdValidationError{}

// Validate checks the field values on PickPointId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PickPointId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PickPointId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PickPointIdMultiError, or
// nil if none found.
func (m *PickPointId) ValidateAll() error {
	return m.validate(true)
}

func (m *PickPointId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPickPointId() <= 0 {
		err := PickPointIdValidationError{
			field:  "PickPointId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PickPointIdMultiError(errors)
	}

	return nil
}

// PickPointIdMultiError is an error wrapping multiple validation errors
// returned by PickPointId.ValidateAll() if the designated constraints aren't met.
type PickPointIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PickPointIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PickPointIdMultiError) AllErrors() []error { return m }

// PickPointIdValidationError is the validation error returned by
// PickPointId.Validate if the designated constraints aren't met.
type PickPointIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PickPointIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PickPointIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PickPointIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PickPointIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PickPointIdValidationError) ErrorName() string { return "PickPointIdValidationError" }

// Error satisfies the builtin error interface
func (e PickPointIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPickPointId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PickPointIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PickPointIdValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "OrderId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "OrderId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "OrderId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClientId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ClientId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ClientId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClientId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ClientId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "AddedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "AddedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "AddedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShelfLife()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ShelfLife",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ShelfLife",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShelfLife()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ShelfLife",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Issued

	if all {
		switch v := interface{}(m.GetIssueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "IssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "IssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "IssueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Returned

	if all {
		switch v := interface{}(m.GetReturnDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReturnDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReturnDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReturnDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ReturnDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Deleted

	if all {
		switch v := interface{}(m.GetDeletedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "DeletedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "DeletedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "DeletedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetHash()) < 1 {
		err := OrderValidationError{
			field:  "Hash",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() <= 0 {
		err := OrderValidationError{
			field:  "Weight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCost() <= 0 {
		err := OrderValidationError{
			field:  "Cost",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Order_PackageType_name[int32(m.GetPackage())]; !ok {
		err := OrderValidationError{
			field:  "Package",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on RegistratePickPointIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistratePickPointIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistratePickPointIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistratePickPointIdRequestMultiError, or nil if none found.
func (m *RegistratePickPointIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistratePickPointIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPickPointId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegistratePickPointIdRequestValidationError{
					field:  "PickPointId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegistratePickPointIdRequestValidationError{
					field:  "PickPointId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickPointId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistratePickPointIdRequestValidationError{
				field:  "PickPointId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegistratePickPointIdRequestMultiError(errors)
	}

	return nil
}

// RegistratePickPointIdRequestMultiError is an error wrapping multiple
// validation errors returned by RegistratePickPointIdRequest.ValidateAll() if
// the designated constraints aren't met.
type RegistratePickPointIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistratePickPointIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistratePickPointIdRequestMultiError) AllErrors() []error { return m }

// RegistratePickPointIdRequestValidationError is the validation error returned
// by RegistratePickPointIdRequest.Validate if the designated constraints
// aren't met.
type RegistratePickPointIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistratePickPointIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistratePickPointIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistratePickPointIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistratePickPointIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistratePickPointIdRequestValidationError) ErrorName() string {
	return "RegistratePickPointIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegistratePickPointIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistratePickPointIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistratePickPointIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistratePickPointIdRequestValidationError{}

// Validate checks the field values on OrderWithPickPoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderWithPickPoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderWithPickPoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderWithPickPointMultiError, or nil if none found.
func (m *OrderWithPickPoint) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderWithPickPoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderWithPickPointValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderWithPickPointValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderWithPickPointValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPickPointId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderWithPickPointValidationError{
					field:  "PickPointId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderWithPickPointValidationError{
					field:  "PickPointId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickPointId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderWithPickPointValidationError{
				field:  "PickPointId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderWithPickPointMultiError(errors)
	}

	return nil
}

// OrderWithPickPointMultiError is an error wrapping multiple validation errors
// returned by OrderWithPickPoint.ValidateAll() if the designated constraints
// aren't met.
type OrderWithPickPointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderWithPickPointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderWithPickPointMultiError) AllErrors() []error { return m }

// OrderWithPickPointValidationError is the validation error returned by
// OrderWithPickPoint.Validate if the designated constraints aren't met.
type OrderWithPickPointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderWithPickPointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderWithPickPointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderWithPickPointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderWithPickPointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderWithPickPointValidationError) ErrorName() string {
	return "OrderWithPickPointValidationError"
}

// Error satisfies the builtin error interface
func (e OrderWithPickPointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderWithPickPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderWithPickPointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderWithPickPointValidationError{}

// Validate checks the field values on Command with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Command) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Command with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommandMultiError, or nil if none found.
func (m *Command) ValidateAll() error {
	return m.validate(true)
}

func (m *Command) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CommandValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return CommandMultiError(errors)
	}

	return nil
}

// CommandMultiError is an error wrapping multiple validation errors returned
// by Command.ValidateAll() if the designated constraints aren't met.
type CommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandMultiError) AllErrors() []error { return m }

// CommandValidationError is the validation error returned by Command.Validate
// if the designated constraints aren't met.
type CommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandValidationError) ErrorName() string { return "CommandValidationError" }

// Error satisfies the builtin error interface
func (e CommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandValidationError{}

// Validate checks the field values on AcceptOrderFromCurierRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptOrderFromCurierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptOrderFromCurierRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptOrderFromCurierRequestMultiError, or nil if none found.
func (m *AcceptOrderFromCurierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptOrderFromCurierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptOrderFromCurierRequestValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptOrderFromCurierRequestValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptOrderFromCurierRequestValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AcceptOrderFromCurierRequestMultiError(errors)
	}

	return nil
}

// AcceptOrderFromCurierRequestMultiError is an error wrapping multiple
// validation errors returned by AcceptOrderFromCurierRequest.ValidateAll() if
// the designated constraints aren't met.
type AcceptOrderFromCurierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptOrderFromCurierRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptOrderFromCurierRequestMultiError) AllErrors() []error { return m }

// AcceptOrderFromCurierRequestValidationError is the validation error returned
// by AcceptOrderFromCurierRequest.Validate if the designated constraints
// aren't met.
type AcceptOrderFromCurierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOrderFromCurierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOrderFromCurierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOrderFromCurierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOrderFromCurierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOrderFromCurierRequestValidationError) ErrorName() string {
	return "AcceptOrderFromCurierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOrderFromCurierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOrderFromCurierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOrderFromCurierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOrderFromCurierRequestValidationError{}

// Validate checks the field values on ReturnOrderToCurierRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderToCurierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderToCurierRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderToCurierRequestMultiError, or nil if none found.
func (m *ReturnOrderToCurierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderToCurierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReturnOrderToCurierRequestValidationError{
					field:  "OrderId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReturnOrderToCurierRequestValidationError{
					field:  "OrderId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReturnOrderToCurierRequestValidationError{
				field:  "OrderId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReturnOrderToCurierRequestMultiError(errors)
	}

	return nil
}

// ReturnOrderToCurierRequestMultiError is an error wrapping multiple
// validation errors returned by ReturnOrderToCurierRequest.ValidateAll() if
// the designated constraints aren't met.
type ReturnOrderToCurierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderToCurierRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderToCurierRequestMultiError) AllErrors() []error { return m }

// ReturnOrderToCurierRequestValidationError is the validation error returned
// by ReturnOrderToCurierRequest.Validate if the designated constraints aren't met.
type ReturnOrderToCurierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderToCurierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderToCurierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderToCurierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderToCurierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderToCurierRequestValidationError) ErrorName() string {
	return "ReturnOrderToCurierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderToCurierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderToCurierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderToCurierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderToCurierRequestValidationError{}

// Validate checks the field values on IssueOrderToClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueOrderToClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueOrderToClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueOrderToClientRequestMultiError, or nil if none found.
func (m *IssueOrderToClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueOrderToClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrderIds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IssueOrderToClientRequestValidationError{
						field:  fmt.Sprintf("OrderIds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IssueOrderToClientRequestValidationError{
						field:  fmt.Sprintf("OrderIds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IssueOrderToClientRequestValidationError{
					field:  fmt.Sprintf("OrderIds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IssueOrderToClientRequestMultiError(errors)
	}

	return nil
}

// IssueOrderToClientRequestMultiError is an error wrapping multiple validation
// errors returned by IssueOrderToClientRequest.ValidateAll() if the
// designated constraints aren't met.
type IssueOrderToClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueOrderToClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueOrderToClientRequestMultiError) AllErrors() []error { return m }

// IssueOrderToClientRequestValidationError is the validation error returned by
// IssueOrderToClientRequest.Validate if the designated constraints aren't met.
type IssueOrderToClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueOrderToClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueOrderToClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueOrderToClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueOrderToClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueOrderToClientRequestValidationError) ErrorName() string {
	return "IssueOrderToClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IssueOrderToClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueOrderToClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueOrderToClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueOrderToClientRequestValidationError{}

// Validate checks the field values on ListOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersRequestMultiError, or nil if none found.
func (m *ListOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClientId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOrdersRequestValidationError{
					field:  "ClientId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOrdersRequestValidationError{
					field:  "ClientId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClientId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrdersRequestValidationError{
				field:  "ClientId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Limit != nil {

		if m.GetLimit() < 0 {
			err := ListOrdersRequestValidationError{
				field:  "Limit",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.PickPointId != nil {

		if all {
			switch v := interface{}(m.GetPickPointId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrdersRequestValidationError{
						field:  "PickPointId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrdersRequestValidationError{
						field:  "PickPointId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPickPointId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrdersRequestValidationError{
					field:  "PickPointId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrdersRequestMultiError(errors)
	}

	return nil
}

// ListOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by ListOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersRequestMultiError) AllErrors() []error { return m }

// ListOrdersRequestValidationError is the validation error returned by
// ListOrdersRequest.Validate if the designated constraints aren't met.
type ListOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersRequestValidationError) ErrorName() string {
	return "ListOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersRequestValidationError{}

// Validate checks the field values on ListOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersResponseMultiError, or nil if none found.
func (m *ListOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrdersResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrdersResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrdersResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrdersResponseMultiError(errors)
	}

	return nil
}

// ListOrdersResponseMultiError is an error wrapping multiple validation errors
// returned by ListOrdersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersResponseMultiError) AllErrors() []error { return m }

// ListOrdersResponseValidationError is the validation error returned by
// ListOrdersResponse.Validate if the designated constraints aren't met.
type ListOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersResponseValidationError) ErrorName() string {
	return "ListOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersResponseValidationError{}

// Validate checks the field values on AcceptReturnFromClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptReturnFromClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptReturnFromClientRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AcceptReturnFromClientRequestMultiError, or nil if none found.
func (m *AcceptReturnFromClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptReturnFromClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClientId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptReturnFromClientRequestValidationError{
					field:  "ClientId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptReturnFromClientRequestValidationError{
					field:  "ClientId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClientId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptReturnFromClientRequestValidationError{
				field:  "ClientId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrderId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptReturnFromClientRequestValidationError{
					field:  "OrderId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptReturnFromClientRequestValidationError{
					field:  "OrderId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptReturnFromClientRequestValidationError{
				field:  "OrderId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AcceptReturnFromClientRequestMultiError(errors)
	}

	return nil
}

// AcceptReturnFromClientRequestMultiError is an error wrapping multiple
// validation errors returned by AcceptReturnFromClientRequest.ValidateAll()
// if the designated constraints aren't met.
type AcceptReturnFromClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptReturnFromClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptReturnFromClientRequestMultiError) AllErrors() []error { return m }

// AcceptReturnFromClientRequestValidationError is the validation error
// returned by AcceptReturnFromClientRequest.Validate if the designated
// constraints aren't met.
type AcceptReturnFromClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptReturnFromClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptReturnFromClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptReturnFromClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptReturnFromClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptReturnFromClientRequestValidationError) ErrorName() string {
	return "AcceptReturnFromClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptReturnFromClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptReturnFromClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptReturnFromClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptReturnFromClientRequestValidationError{}

// Validate checks the field values on ListReturnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReturnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReturnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReturnsRequestMultiError, or nil if none found.
func (m *ListReturnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReturnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListReturnsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := ListReturnsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListReturnsRequestMultiError(errors)
	}

	return nil
}

// ListReturnsRequestMultiError is an error wrapping multiple validation errors
// returned by ListReturnsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListReturnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReturnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReturnsRequestMultiError) AllErrors() []error { return m }

// ListReturnsRequestValidationError is the validation error returned by
// ListReturnsRequest.Validate if the designated constraints aren't met.
type ListReturnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReturnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReturnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReturnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReturnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReturnsRequestValidationError) ErrorName() string {
	return "ListReturnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListReturnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReturnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReturnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReturnsRequestValidationError{}

// Validate checks the field values on ListReturnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReturnsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReturnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReturnsResponseMultiError, or nil if none found.
func (m *ListReturnsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReturnsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReturnsResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReturnsResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReturnsResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListReturnsResponseMultiError(errors)
	}

	return nil
}

// ListReturnsResponseMultiError is an error wrapping multiple validation
// errors returned by ListReturnsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListReturnsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReturnsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReturnsResponseMultiError) AllErrors() []error { return m }

// ListReturnsResponseValidationError is the validation error returned by
// ListReturnsResponse.Validate if the designated constraints aren't met.
type ListReturnsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReturnsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReturnsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReturnsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReturnsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReturnsResponseValidationError) ErrorName() string {
	return "ListReturnsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReturnsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReturnsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReturnsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReturnsResponseValidationError{}

// Validate checks the field values on HelpResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelpResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelpResponseMultiError, or
// nil if none found.
func (m *HelpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HelpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HelpResponseValidationError{
						field:  fmt.Sprintf("Commands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HelpResponseValidationError{
						field:  fmt.Sprintf("Commands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HelpResponseValidationError{
					field:  fmt.Sprintf("Commands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HelpResponseMultiError(errors)
	}

	return nil
}

// HelpResponseMultiError is an error wrapping multiple validation errors
// returned by HelpResponse.ValidateAll() if the designated constraints aren't met.
type HelpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelpResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelpResponseMultiError) AllErrors() []error { return m }

// HelpResponseValidationError is the validation error returned by
// HelpResponse.Validate if the designated constraints aren't met.
type HelpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelpResponseValidationError) ErrorName() string { return "HelpResponseValidationError" }

// Error satisfies the builtin error interface
func (e HelpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelpResponseValidationError{}
