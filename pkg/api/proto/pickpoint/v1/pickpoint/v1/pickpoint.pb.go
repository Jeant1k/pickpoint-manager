// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: pickpoint/v1/pickpoint.proto

package pickpoint

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Order_PackageType int32

const (
	Order_PACKAGE_TYPE_UNSPECIFIED Order_PackageType = 0
	Order_PACKAGE_TYPE_BAG         Order_PackageType = 1
	Order_PACKAGE_TYPE_BOX         Order_PackageType = 2
	Order_PACKAGE_TYPE_FILM        Order_PackageType = 3
)

// Enum value maps for Order_PackageType.
var (
	Order_PackageType_name = map[int32]string{
		0: "PACKAGE_TYPE_UNSPECIFIED",
		1: "PACKAGE_TYPE_BAG",
		2: "PACKAGE_TYPE_BOX",
		3: "PACKAGE_TYPE_FILM",
	}
	Order_PackageType_value = map[string]int32{
		"PACKAGE_TYPE_UNSPECIFIED": 0,
		"PACKAGE_TYPE_BAG":         1,
		"PACKAGE_TYPE_BOX":         2,
		"PACKAGE_TYPE_FILM":        3,
	}
)

func (x Order_PackageType) Enum() *Order_PackageType {
	p := new(Order_PackageType)
	*p = x
	return p
}

func (x Order_PackageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_PackageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pickpoint_v1_pickpoint_proto_enumTypes[0].Descriptor()
}

func (Order_PackageType) Type() protoreflect.EnumType {
	return &file_pickpoint_v1_pickpoint_proto_enumTypes[0]
}

func (x Order_PackageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_PackageType.Descriptor instead.
func (Order_PackageType) EnumDescriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{3, 0}
}

type OrderId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId int64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *OrderId) Reset() {
	*x = OrderId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderId) ProtoMessage() {}

func (x *OrderId) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderId.ProtoReflect.Descriptor instead.
func (*OrderId) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{0}
}

func (x *OrderId) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type ClientId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId int64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *ClientId) Reset() {
	*x = ClientId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientId) ProtoMessage() {}

func (x *ClientId) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientId.ProtoReflect.Descriptor instead.
func (*ClientId) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{1}
}

func (x *ClientId) GetClientId() int64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type PickPointId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PickPointId int64 `protobuf:"varint,1,opt,name=pick_point_id,json=pickPointId,proto3" json:"pick_point_id,omitempty"`
}

func (x *PickPointId) Reset() {
	*x = PickPointId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickPointId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickPointId) ProtoMessage() {}

func (x *PickPointId) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickPointId.ProtoReflect.Descriptor instead.
func (*PickPointId) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{2}
}

func (x *PickPointId) GetPickPointId() int64 {
	if x != nil {
		return x.PickPointId
	}
	return 0
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId     *OrderId               `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ClientId    *ClientId              `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AddedDate   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=added_date,json=addedDate,proto3" json:"added_date,omitempty"`
	ShelfLife   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=shelf_life,json=shelfLife,proto3" json:"shelf_life,omitempty"`
	Issued      bool                   `protobuf:"varint,5,opt,name=issued,proto3" json:"issued,omitempty"`
	IssueDate   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	Returned    bool                   `protobuf:"varint,7,opt,name=returned,proto3" json:"returned,omitempty"`
	ReturnDate  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=return_date,json=returnDate,proto3" json:"return_date,omitempty"`
	Deleted     bool                   `protobuf:"varint,9,opt,name=deleted,proto3" json:"deleted,omitempty"`
	DeletedDate *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=deleted_date,json=deletedDate,proto3" json:"deleted_date,omitempty"`
	Hash        string                 `protobuf:"bytes,11,opt,name=hash,proto3" json:"hash,omitempty"`
	Weight      float64                `protobuf:"fixed64,12,opt,name=weight,proto3" json:"weight,omitempty"`
	Cost        float64                `protobuf:"fixed64,13,opt,name=cost,proto3" json:"cost,omitempty"`
	Package     Order_PackageType      `protobuf:"varint,14,opt,name=package,proto3,enum=pickpoint.Order_PackageType" json:"package,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{3}
}

func (x *Order) GetOrderId() *OrderId {
	if x != nil {
		return x.OrderId
	}
	return nil
}

func (x *Order) GetClientId() *ClientId {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *Order) GetAddedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AddedDate
	}
	return nil
}

func (x *Order) GetShelfLife() *timestamppb.Timestamp {
	if x != nil {
		return x.ShelfLife
	}
	return nil
}

func (x *Order) GetIssued() bool {
	if x != nil {
		return x.Issued
	}
	return false
}

func (x *Order) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *Order) GetReturned() bool {
	if x != nil {
		return x.Returned
	}
	return false
}

func (x *Order) GetReturnDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReturnDate
	}
	return nil
}

func (x *Order) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Order) GetDeletedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedDate
	}
	return nil
}

func (x *Order) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Order) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Order) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Order) GetPackage() Order_PackageType {
	if x != nil {
		return x.Package
	}
	return Order_PACKAGE_TYPE_UNSPECIFIED
}

type RegistratePickPointIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PickPointId *PickPointId `protobuf:"bytes,1,opt,name=pick_point_id,json=pickPointId,proto3" json:"pick_point_id,omitempty"`
}

func (x *RegistratePickPointIdRequest) Reset() {
	*x = RegistratePickPointIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistratePickPointIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistratePickPointIdRequest) ProtoMessage() {}

func (x *RegistratePickPointIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistratePickPointIdRequest.ProtoReflect.Descriptor instead.
func (*RegistratePickPointIdRequest) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{4}
}

func (x *RegistratePickPointIdRequest) GetPickPointId() *PickPointId {
	if x != nil {
		return x.PickPointId
	}
	return nil
}

type OrderWithPickPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order       *Order       `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	PickPointId *PickPointId `protobuf:"bytes,2,opt,name=pick_point_id,json=pickPointId,proto3" json:"pick_point_id,omitempty"`
}

func (x *OrderWithPickPoint) Reset() {
	*x = OrderWithPickPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderWithPickPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderWithPickPoint) ProtoMessage() {}

func (x *OrderWithPickPoint) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderWithPickPoint.ProtoReflect.Descriptor instead.
func (*OrderWithPickPoint) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{5}
}

func (x *OrderWithPickPoint) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *OrderWithPickPoint) GetPickPointId() *PickPointId {
	if x != nil {
		return x.PickPointId
	}
	return nil
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{6}
}

func (x *Command) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Command) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type AcceptOrderFromCurierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *AcceptOrderFromCurierRequest) Reset() {
	*x = AcceptOrderFromCurierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptOrderFromCurierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptOrderFromCurierRequest) ProtoMessage() {}

func (x *AcceptOrderFromCurierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptOrderFromCurierRequest.ProtoReflect.Descriptor instead.
func (*AcceptOrderFromCurierRequest) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{7}
}

func (x *AcceptOrderFromCurierRequest) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

type ReturnOrderToCurierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId *OrderId `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *ReturnOrderToCurierRequest) Reset() {
	*x = ReturnOrderToCurierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnOrderToCurierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnOrderToCurierRequest) ProtoMessage() {}

func (x *ReturnOrderToCurierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnOrderToCurierRequest.ProtoReflect.Descriptor instead.
func (*ReturnOrderToCurierRequest) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{8}
}

func (x *ReturnOrderToCurierRequest) GetOrderId() *OrderId {
	if x != nil {
		return x.OrderId
	}
	return nil
}

type IssueOrderToClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderIds []*OrderId `protobuf:"bytes,1,rep,name=order_ids,json=orderIds,proto3" json:"order_ids,omitempty"`
}

func (x *IssueOrderToClientRequest) Reset() {
	*x = IssueOrderToClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueOrderToClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueOrderToClientRequest) ProtoMessage() {}

func (x *IssueOrderToClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueOrderToClientRequest.ProtoReflect.Descriptor instead.
func (*IssueOrderToClientRequest) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{9}
}

func (x *IssueOrderToClientRequest) GetOrderIds() []*OrderId {
	if x != nil {
		return x.OrderIds
	}
	return nil
}

type ListOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId    *ClientId    `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Limit       *int64       `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	PickPointId *PickPointId `protobuf:"bytes,3,opt,name=pick_point_id,json=pickPointId,proto3,oneof" json:"pick_point_id,omitempty"`
}

func (x *ListOrdersRequest) Reset() {
	*x = ListOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersRequest) ProtoMessage() {}

func (x *ListOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersRequest.ProtoReflect.Descriptor instead.
func (*ListOrdersRequest) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{10}
}

func (x *ListOrdersRequest) GetClientId() *ClientId {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *ListOrdersRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListOrdersRequest) GetPickPointId() *PickPointId {
	if x != nil {
		return x.PickPointId
	}
	return nil
}

type ListOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*OrderWithPickPoint `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListOrdersResponse) Reset() {
	*x = ListOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersResponse) ProtoMessage() {}

func (x *ListOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersResponse.ProtoReflect.Descriptor instead.
func (*ListOrdersResponse) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{11}
}

func (x *ListOrdersResponse) GetList() []*OrderWithPickPoint {
	if x != nil {
		return x.List
	}
	return nil
}

type AcceptReturnFromClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId *ClientId `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	OrderId  *OrderId  `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *AcceptReturnFromClientRequest) Reset() {
	*x = AcceptReturnFromClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptReturnFromClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptReturnFromClientRequest) ProtoMessage() {}

func (x *AcceptReturnFromClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptReturnFromClientRequest.ProtoReflect.Descriptor instead.
func (*AcceptReturnFromClientRequest) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{12}
}

func (x *AcceptReturnFromClientRequest) GetClientId() *ClientId {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *AcceptReturnFromClientRequest) GetOrderId() *OrderId {
	if x != nil {
		return x.OrderId
	}
	return nil
}

type ListReturnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListReturnsRequest) Reset() {
	*x = ListReturnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReturnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReturnsRequest) ProtoMessage() {}

func (x *ListReturnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReturnsRequest.ProtoReflect.Descriptor instead.
func (*ListReturnsRequest) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{13}
}

func (x *ListReturnsRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListReturnsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListReturnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *ListReturnsResponse) Reset() {
	*x = ListReturnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReturnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReturnsResponse) ProtoMessage() {}

func (x *ListReturnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReturnsResponse.ProtoReflect.Descriptor instead.
func (*ListReturnsResponse) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{14}
}

func (x *ListReturnsResponse) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

type HelpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands []*Command `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *HelpResponse) Reset() {
	*x = HelpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpResponse) ProtoMessage() {}

func (x *HelpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pickpoint_v1_pickpoint_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpResponse.ProtoReflect.Descriptor instead.
func (*HelpResponse) Descriptor() ([]byte, []int) {
	return file_pickpoint_v1_pickpoint_proto_rawDescGZIP(), []int{15}
}

func (x *HelpResponse) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

var File_pickpoint_v1_pickpoint_proto protoreflect.FileDescriptor

var file_pickpoint_v1_pickpoint_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x20, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x30, 0x0a,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x3a, 0x0a, 0x0b, 0x50, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x0b,
	0x70, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xfe, 0x05, 0x0a, 0x05,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x64, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x26,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e,
	0xfa, 0x42, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x69,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x6e, 0x0a, 0x0b,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x43,
	0x4b, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x47, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x4f, 0x58, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x4d, 0x10, 0x03, 0x22, 0xa4, 0x01, 0x0a,
	0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0d, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x50, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0b, 0x70, 0x69,
	0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x48, 0x92, 0x41, 0x45, 0x0a, 0x43,
	0x2a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x50, 0x69, 0x63, 0x6b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x13,
	0xd0, 0x9e, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5,
	0x2e, 0x2e, 0x2e, 0xd2, 0x01, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0x78, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x1c, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x1c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x13, 0xd0, 0x9e, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0,
	0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x2e, 0x2e, 0x2e, 0xd2, 0x01, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x3a, 0x41, 0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x2a, 0x1a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x13, 0xd0, 0x9e, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x2e, 0x2e, 0x2e, 0xd2, 0x01, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x3a, 0x41, 0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x2a, 0x19, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x13, 0xd0, 0x9e, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0,
	0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x2e, 0x2e, 0x2e, 0xd2, 0x01, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x28, 0x00, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x48, 0x01, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x3a, 0x39, 0x92, 0x41, 0x36, 0x0a, 0x34, 0x2a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x13, 0xd0, 0x9e,
	0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x2e, 0x2e,
	0x2e, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x69, 0x63, 0x6b,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x2a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x13, 0xd0,
	0x9e, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x2e,
	0x2e, 0x2e, 0x22, 0xd2, 0x01, 0x0a, 0x1d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x50, 0x92, 0x41, 0x4d, 0x0a, 0x4b, 0x2a, 0x1d, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x13, 0xd0, 0x9e, 0xd0,
	0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x2e, 0x2e, 0x2e,
	0xd2, 0x01, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x3a, 0x41, 0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x2a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x13, 0xd0, 0x9e,
	0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x2e, 0x2e,
	0x2e, 0xd2, 0x01, 0x04, 0x70, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0x70, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x69,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x13, 0xd0, 0x9e, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xb5, 0x2e, 0x2e, 0x2e, 0x22, 0x68, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x3a, 0x28, 0x92, 0x41, 0x25, 0x0a, 0x23, 0x2a, 0x0c, 0x48,
	0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x13, 0xd0, 0x9e, 0xd0,
	0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x2e, 0x2e, 0x2e,
	0x32, 0x8c, 0x07, 0x0a, 0x09, 0x50, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x73,
	0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x50, 0x69, 0x63, 0x6b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x50, 0x69,
	0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x75, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x69, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x70,
	0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x13, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x12, 0x25, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x6e, 0x0a,
	0x12, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x65, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x69,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x69, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x78, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x2e, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x69,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x1d, 0x2e,
	0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x04, 0x48, 0x65, 0x6c,
	0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x70, 0x69, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f,
	0x76, 0x31, 0x2f, 0x68, 0x65, 0x6c, 0x70, 0x1a, 0x16, 0x92, 0x41, 0x13, 0x12, 0x11, 0x50, 0x69,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x64,
	0x65, 0x76, 0x2f, 0x65, 0x76, 0x67, 0x65, 0x6e, 0x69, 0x79, 0x5f, 0x74, 0x69, 0x6b, 0x68, 0x30,
	0x6e, 0x30, 0x38, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x31, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x3b, 0x70, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pickpoint_v1_pickpoint_proto_rawDescOnce sync.Once
	file_pickpoint_v1_pickpoint_proto_rawDescData = file_pickpoint_v1_pickpoint_proto_rawDesc
)

func file_pickpoint_v1_pickpoint_proto_rawDescGZIP() []byte {
	file_pickpoint_v1_pickpoint_proto_rawDescOnce.Do(func() {
		file_pickpoint_v1_pickpoint_proto_rawDescData = protoimpl.X.CompressGZIP(file_pickpoint_v1_pickpoint_proto_rawDescData)
	})
	return file_pickpoint_v1_pickpoint_proto_rawDescData
}

var file_pickpoint_v1_pickpoint_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pickpoint_v1_pickpoint_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_pickpoint_v1_pickpoint_proto_goTypes = []any{
	(Order_PackageType)(0),                // 0: pickpoint.Order.PackageType
	(*OrderId)(nil),                       // 1: pickpoint.OrderId
	(*ClientId)(nil),                      // 2: pickpoint.ClientId
	(*PickPointId)(nil),                   // 3: pickpoint.PickPointId
	(*Order)(nil),                         // 4: pickpoint.Order
	(*RegistratePickPointIdRequest)(nil),  // 5: pickpoint.RegistratePickPointIdRequest
	(*OrderWithPickPoint)(nil),            // 6: pickpoint.OrderWithPickPoint
	(*Command)(nil),                       // 7: pickpoint.Command
	(*AcceptOrderFromCurierRequest)(nil),  // 8: pickpoint.AcceptOrderFromCurierRequest
	(*ReturnOrderToCurierRequest)(nil),    // 9: pickpoint.ReturnOrderToCurierRequest
	(*IssueOrderToClientRequest)(nil),     // 10: pickpoint.IssueOrderToClientRequest
	(*ListOrdersRequest)(nil),             // 11: pickpoint.ListOrdersRequest
	(*ListOrdersResponse)(nil),            // 12: pickpoint.ListOrdersResponse
	(*AcceptReturnFromClientRequest)(nil), // 13: pickpoint.AcceptReturnFromClientRequest
	(*ListReturnsRequest)(nil),            // 14: pickpoint.ListReturnsRequest
	(*ListReturnsResponse)(nil),           // 15: pickpoint.ListReturnsResponse
	(*HelpResponse)(nil),                  // 16: pickpoint.HelpResponse
	(*timestamppb.Timestamp)(nil),         // 17: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                 // 18: google.protobuf.Empty
}
var file_pickpoint_v1_pickpoint_proto_depIdxs = []int32{
	1,  // 0: pickpoint.Order.order_id:type_name -> pickpoint.OrderId
	2,  // 1: pickpoint.Order.client_id:type_name -> pickpoint.ClientId
	17, // 2: pickpoint.Order.added_date:type_name -> google.protobuf.Timestamp
	17, // 3: pickpoint.Order.shelf_life:type_name -> google.protobuf.Timestamp
	17, // 4: pickpoint.Order.issue_date:type_name -> google.protobuf.Timestamp
	17, // 5: pickpoint.Order.return_date:type_name -> google.protobuf.Timestamp
	17, // 6: pickpoint.Order.deleted_date:type_name -> google.protobuf.Timestamp
	0,  // 7: pickpoint.Order.package:type_name -> pickpoint.Order.PackageType
	3,  // 8: pickpoint.RegistratePickPointIdRequest.pick_point_id:type_name -> pickpoint.PickPointId
	4,  // 9: pickpoint.OrderWithPickPoint.order:type_name -> pickpoint.Order
	3,  // 10: pickpoint.OrderWithPickPoint.pick_point_id:type_name -> pickpoint.PickPointId
	4,  // 11: pickpoint.AcceptOrderFromCurierRequest.order:type_name -> pickpoint.Order
	1,  // 12: pickpoint.ReturnOrderToCurierRequest.order_id:type_name -> pickpoint.OrderId
	1,  // 13: pickpoint.IssueOrderToClientRequest.order_ids:type_name -> pickpoint.OrderId
	2,  // 14: pickpoint.ListOrdersRequest.client_id:type_name -> pickpoint.ClientId
	3,  // 15: pickpoint.ListOrdersRequest.pick_point_id:type_name -> pickpoint.PickPointId
	6,  // 16: pickpoint.ListOrdersResponse.list:type_name -> pickpoint.OrderWithPickPoint
	2,  // 17: pickpoint.AcceptReturnFromClientRequest.client_id:type_name -> pickpoint.ClientId
	1,  // 18: pickpoint.AcceptReturnFromClientRequest.order_id:type_name -> pickpoint.OrderId
	4,  // 19: pickpoint.ListReturnsResponse.orders:type_name -> pickpoint.Order
	7,  // 20: pickpoint.HelpResponse.commands:type_name -> pickpoint.Command
	5,  // 21: pickpoint.Pickpoint.RegistratePickPointId:input_type -> pickpoint.RegistratePickPointIdRequest
	8,  // 22: pickpoint.Pickpoint.AcceptOrderFromCurier:input_type -> pickpoint.AcceptOrderFromCurierRequest
	9,  // 23: pickpoint.Pickpoint.ReturnOrderToCurier:input_type -> pickpoint.ReturnOrderToCurierRequest
	10, // 24: pickpoint.Pickpoint.IssueOrderToClient:input_type -> pickpoint.IssueOrderToClientRequest
	11, // 25: pickpoint.Pickpoint.ListOrders:input_type -> pickpoint.ListOrdersRequest
	13, // 26: pickpoint.Pickpoint.AcceptReturnFromClient:input_type -> pickpoint.AcceptReturnFromClientRequest
	14, // 27: pickpoint.Pickpoint.ListReturns:input_type -> pickpoint.ListReturnsRequest
	18, // 28: pickpoint.Pickpoint.Help:input_type -> google.protobuf.Empty
	18, // 29: pickpoint.Pickpoint.RegistratePickPointId:output_type -> google.protobuf.Empty
	18, // 30: pickpoint.Pickpoint.AcceptOrderFromCurier:output_type -> google.protobuf.Empty
	18, // 31: pickpoint.Pickpoint.ReturnOrderToCurier:output_type -> google.protobuf.Empty
	18, // 32: pickpoint.Pickpoint.IssueOrderToClient:output_type -> google.protobuf.Empty
	12, // 33: pickpoint.Pickpoint.ListOrders:output_type -> pickpoint.ListOrdersResponse
	18, // 34: pickpoint.Pickpoint.AcceptReturnFromClient:output_type -> google.protobuf.Empty
	15, // 35: pickpoint.Pickpoint.ListReturns:output_type -> pickpoint.ListReturnsResponse
	16, // 36: pickpoint.Pickpoint.Help:output_type -> pickpoint.HelpResponse
	29, // [29:37] is the sub-list for method output_type
	21, // [21:29] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_pickpoint_v1_pickpoint_proto_init() }
func file_pickpoint_v1_pickpoint_proto_init() {
	if File_pickpoint_v1_pickpoint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pickpoint_v1_pickpoint_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OrderId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ClientId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PickPointId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RegistratePickPointIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*OrderWithPickPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AcceptOrderFromCurierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ReturnOrderToCurierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*IssueOrderToClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ListOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AcceptReturnFromClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ListReturnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ListReturnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pickpoint_v1_pickpoint_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*HelpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pickpoint_v1_pickpoint_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pickpoint_v1_pickpoint_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pickpoint_v1_pickpoint_proto_goTypes,
		DependencyIndexes: file_pickpoint_v1_pickpoint_proto_depIdxs,
		EnumInfos:         file_pickpoint_v1_pickpoint_proto_enumTypes,
		MessageInfos:      file_pickpoint_v1_pickpoint_proto_msgTypes,
	}.Build()
	File_pickpoint_v1_pickpoint_proto = out.File
	file_pickpoint_v1_pickpoint_proto_rawDesc = nil
	file_pickpoint_v1_pickpoint_proto_goTypes = nil
	file_pickpoint_v1_pickpoint_proto_depIdxs = nil
}
