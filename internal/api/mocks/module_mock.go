// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.ozon.dev/evgeniy_tikh0n08/homework-1/internal/models"
)

// MockModule is a mock of Module interface.
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
}

// MockModuleMockRecorder is the mock recorder for MockModule.
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance.
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// AcceptOrderFromCurier mocks base method.
func (m *MockModule) AcceptOrderFromCurier(ctx context.Context, order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptOrderFromCurier", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptOrderFromCurier indicates an expected call of AcceptOrderFromCurier.
func (mr *MockModuleMockRecorder) AcceptOrderFromCurier(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptOrderFromCurier", reflect.TypeOf((*MockModule)(nil).AcceptOrderFromCurier), ctx, order)
}

// AcceptReturnFromClient mocks base method.
func (m *MockModule) AcceptReturnFromClient(ctx context.Context, clientId models.ClientId, orderId models.OrderId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptReturnFromClient", ctx, clientId, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptReturnFromClient indicates an expected call of AcceptReturnFromClient.
func (mr *MockModuleMockRecorder) AcceptReturnFromClient(ctx, clientId, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptReturnFromClient", reflect.TypeOf((*MockModule)(nil).AcceptReturnFromClient), ctx, clientId, orderId)
}

// IssueOrderToClient mocks base method.
func (m *MockModule) IssueOrderToClient(ctx context.Context, orderIds map[models.OrderId]bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueOrderToClient", ctx, orderIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// IssueOrderToClient indicates an expected call of IssueOrderToClient.
func (mr *MockModuleMockRecorder) IssueOrderToClient(ctx, orderIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueOrderToClient", reflect.TypeOf((*MockModule)(nil).IssueOrderToClient), ctx, orderIds)
}

// ListOrders mocks base method.
func (m *MockModule) ListOrders(ctx context.Context, clientId models.ClientId, limit models.Limit, pickPointId models.PickPointId) ([]models.OrderWithPickPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", ctx, clientId, limit, pickPointId)
	ret0, _ := ret[0].([]models.OrderWithPickPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockModuleMockRecorder) ListOrders(ctx, clientId, limit, pickPointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockModule)(nil).ListOrders), ctx, clientId, limit, pickPointId)
}

// ListReturns mocks base method.
func (m *MockModule) ListReturns(ctx context.Context, page models.Page, pageSize models.PageSize) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReturns", ctx, page, pageSize)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReturns indicates an expected call of ListReturns.
func (mr *MockModuleMockRecorder) ListReturns(ctx, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReturns", reflect.TypeOf((*MockModule)(nil).ListReturns), ctx, page, pageSize)
}

// RegistratePickPointId mocks base method.
func (m *MockModule) RegistratePickPointId(ctx context.Context, pickPointId models.PickPointId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegistratePickPointId", ctx, pickPointId)
}

// RegistratePickPointId indicates an expected call of RegistratePickPointId.
func (mr *MockModuleMockRecorder) RegistratePickPointId(ctx, pickPointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistratePickPointId", reflect.TypeOf((*MockModule)(nil).RegistratePickPointId), ctx, pickPointId)
}

// ReturnOrderToCurier mocks base method.
func (m *MockModule) ReturnOrderToCurier(ctx context.Context, orderId models.OrderId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrderToCurier", ctx, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrderToCurier indicates an expected call of ReturnOrderToCurier.
func (mr *MockModuleMockRecorder) ReturnOrderToCurier(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrderToCurier", reflect.TypeOf((*MockModule)(nil).ReturnOrderToCurier), ctx, orderId)
}
